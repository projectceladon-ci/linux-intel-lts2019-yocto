/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Keem Bay Camera LRT Commands
 *
 * Copyright (C) 2018-2020 Intel Corporation
 */
#ifndef KMB_LRT_CMD_H
#define KMB_LRT_CMD_H

/*
 * Specific #defines
 */
#define IC_EVENT_CTRL_TYPE_MASK		0xFF
#define IC_INITI_PIPE_SINGLE		0x1
#define IC_INIT_TRANFORM_HUB_FULL	(1 << 4)

// IC_EVENT_TYPE enum to define event messages
enum {
	IC_EVENT_TYPE_SUCCESFULL = 0,
	IC_EVENT_TYPE_CONFIG_ISP_PIPE,
	IC_EVENT_TYPE_BUILD_ISP_PIPE,
	IC_EVENT_TYPE_DELETE_ISP_PIPE,

	IC_EVENT_TYPE_INIT_MAX
};

enum {
	// Control -> Source
	IC_EVENT_TYPE_CONFIG_SOURCE = (IC_EVENT_TYPE_INIT_MAX + 1),
	IC_EVENT_TYPE_START_SOURCE,
	IC_EVENT_TYPE_STOP_SOURCE,
	IC_EVENT_TYPE_CONFIG_SOURCE_DYNAMIC,
	IC_EVENT_TYPE_SOURCE_SEND_USER_DATA,

	// Source -> Control
	IC_EVENT_TYPE_SOURCE_CONFIGURED,
	IC_EVENT_TYPE_SOURCE_STARTED,
	IC_EVENT_TYPE_SOURCE_STOPPED,
	IC_EVENT_TYPE_SOURCE_DYN_CONFIGURED,

	// Source events
	IC_EVENT_TYPE_READOUT_START,
	IC_EVENT_TYPE_READOUT_END,
	IC_EVENT_TYPE_LINE_REACHED,

	// ISP events
	IC_EVENT_TYPE_ISP_START,
	IC_EVENT_TYPE_ISP_END,
	IC_EVENT_TYPE_STATS_READY,
	IC_EVENT_TYPE_ISP_CONFIG_ACCEPTED,
	IC_EVENT_TYPE_ZSL_LOCKED,
	IC_EVENT_TYPE_CAPTURE_MADE,

	// Isp config events
	IC_EVENT_TYPE_CONFIG_ISP,
	IC_EVENT_TYPE_LOCK_ZSL,
	IC_EVENT_TYPE_CAPTURE,
	IC_EVENT_TYPE_UNLOCK_ZSL,
	IC_EVENT_TYPE_ZSL_ADD,
	IC_EVENT_TYPE_ERROR,

	IC_EVENT_MAX
};

enum {
	IC_ERROR_PIPE_INIT = (IC_EVENT_MAX + 1),
	IC_ERROR_ISP_CONFIG,
	IC_ERROR_YUV_BUFF_MISSING,

	IC_ERROR_ISP_MAX
};

enum {
	IC_ERROR_SRC_MIPI_WRONG_STATE = (IC_ERROR_ISP_MAX + 1),
	IC_ERROR_SRC_MIPI_BAD_PARAMETER,
	IC_ERROR_SRC_MIPI_CFG_MISSING,
	IC_ERROR_SRC_MIPI_CFG_SKIPPED,
	IC_ERROR_SRC_MIPI_OUT_BUFFERS_NOT_AVAILABLE,
	IC_ERROR_SRC_MIPI_EOF_TIMEOUT,
	IC_ERROR_SRC_MIPI_LOC_BUF_NOT_AVAILABLE,
	IC_ERROR_SRC_MIPI_INTERNAL_ERROR,
	IC_ERROR_SRC_TRANSMISION_ERROR,
	IC_ERROR_SRC_DRIVER_UNEXPECTED,

	IC_ERROR_SRC_MIPI_MAX
};

enum {
	IC_ERROR_NO_ZSL_BUFFS_AVAILABLE = (IC_ERROR_SRC_MIPI_MAX + 1),
	IC_ERROR_TRIGGER_NOT_EXISTING_BUFF,

	IC_ERROR_ISP_CTRL_MAX,
};

typedef struct __packed __aligned(64) icEvS {
	struct {
		uint32_t instId;
		uint32_t seqNr;
		uint32_t userDataBaseAddr01;
		uint32_t userDataBaseAddr02;
		int64_t  ts;
	} EvInfo;
	volatile uint32_t   ctrl;   /* See IC_EVENT_TYPE_* */
} icEv;

#endif  /* KMB_LRT_CMD_H */
